import { useState } from 'react';
import { 
  Copy, Download, Server, HardDrive, Database, Zap, Cloud, 
  AlertTriangle, Calendar, DollarSign, MapPin, CheckCircle, 
  ExternalLink, Loader2, Trash2, Eye, Archive, Clock,
  Activity, TrendingUp, Shield, Sparkles
} from 'lucide-react';
import { Badge } from './ui/badge';
import { Button } from './ui/button';

function RecommendationCard({ resource }) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [lastAction, setLastAction] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);

  const getResourceIcon = (type) => {
    const iconProps = { className: "w-5 h-5" };
    switch (type?.toLowerCase()) {
      case 'ec2': return <Server {...iconProps} />;
      case 'ebs': return <HardDrive {...iconProps} />;
      case 's3': return <Database {...iconProps} />;
      case 'rds': return <Database {...iconProps} />;
      case 'lambda': return <Zap {...iconProps} />;
      default: return <Cloud {...iconProps} />;
    }
  };

  const getResourceColor = (type) => {
    switch (type?.toLowerCase()) {
      case 'ec2': return {
        gradient: 'from-orange-500 to-red-500',
        bg: 'bg-gradient-to-br from-orange-50 to-red-50',
        iconBg: 'bg-gradient-to-br from-orange-100 to-red-100',
        text: 'text-orange-600',
        badge: 'bg-orange-100 text-orange-800 border-orange-200',
        glow: 'shadow-orange-500/25'
      };
      case 'ebs': return {
        gradient: 'from-purple-500 to-pink-500',
        bg: 'bg-gradient-to-br from-purple-50 to-pink-50',
        iconBg: 'bg-gradient-to-br from-purple-100 to-pink-100',
        text: 'text-purple-600',
        badge: 'bg-purple-100 text-purple-800 border-purple-200',
        glow: 'shadow-purple-500/25'
      };
      case 's3': return {
        gradient: 'from-green-500 to-teal-500',
        bg: 'bg-gradient-to-br from-green-50 to-teal-50',
        iconBg: 'bg-gradient-to-br from-green-100 to-teal-100',
        text: 'text-green-600',
        badge: 'bg-green-100 text-green-800 border-green-200',
        glow: 'shadow-green-500/25'
      };
      case 'rds': return {
        gradient: 'from-blue-500 to-indigo-500',
        bg: 'bg-gradient-to-br from-blue-50 to-indigo-50',
        iconBg: 'bg-gradient-to-br from-blue-100 to-indigo-100',
        text: 'text-blue-600',
        badge: 'bg-blue-100 text-blue-800 border-blue-200',
        glow: 'shadow-blue-500/25'
      };
      case 'lambda': return {
        gradient: 'from-yellow-500 to-orange-500',
        bg: 'bg-gradient-to-br from-yellow-50 to-orange-50',
        iconBg: 'bg-gradient-to-br from-yellow-100 to-orange-100',
        text: 'text-yellow-600',
        badge: 'bg-yellow-100 text-yellow-800 border-yellow-200',
        glow: 'shadow-yellow-500/25'
      };
      default: return {
        gradient: 'from-gray-500 to-slate-500',
        bg: 'bg-gradient-to-br from-gray-50 to-slate-50',
        iconBg: 'bg-gradient-to-br from-gray-100 to-slate-100',
        text: 'text-gray-600',
        badge: 'bg-gray-100 text-gray-800 border-gray-200',
        glow: 'shadow-gray-500/25'
      };
    }
  };

  const getPriorityLevel = (costImpact) => {
    if (costImpact >= 100) return { 
      level: 'High', 
      color: 'bg-gradient-to-r from-red-50 to-red-100 text-red-700 border border-red-200',
      icon: <AlertTriangle className="w-3 h-3" />
    };
    if (costImpact >= 50) return { 
      level: 'Medium', 
      color: 'bg-gradient-to-r from-amber-50 to-amber-100 text-amber-700 border border-amber-200',
      icon: <Activity className="w-3 h-3" />
    };
    return { 
      level: 'Low', 
      color: 'bg-gradient-to-r from-green-50 to-green-100 text-green-700 border border-green-200',
      icon: <Shield className="w-3 h-3" />
    };
  };

  const handleSuccess = (message) => {
    setShowSuccess(message);
    setTimeout(() => {
      setShowSuccess(false);
      setIsGenerating(false);
      setLastAction(null);
    }, 2500);
  };

  const handleGenerate = async () => {
    setIsGenerating(true);
    setLastAction('local');
    
    const tfBlock = `# ${resource.resourceType.toUpperCase()} Resource Cleanup - ${resource.resourceName}
# Generated by Cloud Waste Intelligence Dashboard
# Resource ID: ${resource.resourceId}
# Waste Reason: ${resource.reason}
# Monthly Cost Impact: $${resource.cost_impact || 0}
# Generated: ${new Date().toISOString()}

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "${resource.region || 'us-east-1'}"
  
  default_tags {
    tags = {
      ManagedBy = "terraform"
      Project   = "cloud-waste-cleanup"
      CreatedBy = "waste-detector"
    }
  }
}

# Import existing resource first:
# terraform import aws_${resource.resourceType === 'ec2' ? 'instance' : resource.resourceType === 'ebs' ? 'ebs_volume' : resource.resourceType}.${resource.resourceName.replace(/[^a-zA-Z0-9_]/g, '_')} ${resource.resourceId}

resource "aws_${resource.resourceType === 'ec2' ? 'instance' : resource.resourceType === 'ebs' ? 'ebs_volume' : resource.resourceType}" "${resource.resourceName.replace(/[^a-zA-Z0-9_]/g, '_')}" {
  # Resource configuration will be populated after import
  
  tags = {
    Name                = "${resource.resourceName}"
    WasteDetected      = "true"
    WasteReason        = "${resource.reason}"
    CostImpact         = "$${resource.cost_impact || 0}/month"
    DetectionDate      = "${new Date().toISOString().split('T')[0]}"
    ScheduledDeletion  = "pending-review"
  }
  
  lifecycle {
    prevent_destroy = true  # Remove this when ready to delete
  }
}

# Cleanup commands:
# 1. Import: terraform import aws_${resource.resourceType === 'ec2' ? 'instance' : resource.resourceType === 'ebs' ? 'ebs_volume' : resource.resourceType}.${resource.resourceName.replace(/[^a-zA-Z0-9_]/g, '_')} ${resource.resourceId}
# 2. Plan:   terraform plan
# 3. Delete: terraform destroy -target=aws_${resource.resourceType === 'ec2' ? 'instance' : resource.resourceType === 'ebs' ? 'ebs_volume' : resource.resourceType}.${resource.resourceName.replace(/[^a-zA-Z0-9_]/g, '_')}

output "${resource.resourceName.replace(/[^a-zA-Z0-9_]/g, '_')}_cleanup_info" {
  description = "Cleanup information for wasteful resource"
  value = {
    resource_id        = "${resource.resourceId}"
    resource_type      = "${resource.resourceType}"
    monthly_savings    = ${resource.cost_impact || 0}
    waste_reason       = "${resource.reason}"
    cleanup_priority   = "${getPriorityLevel(resource.cost_impact || 0).level.toLowerCase()}"
    region            = "${resource.region || 'us-east-1'}"
  }
}`;
    
    try {
      await navigator.clipboard.writeText(tfBlock);
      handleSuccess("Terraform configuration copied to clipboard!");
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
      setIsGenerating(false);
      setLastAction(null);
      alert('Failed to copy to clipboard. Please try again.');
    }
  };

  const handleGenerateFromAPI = async () => {
    setIsGenerating(true);
    setLastAction('api');
    
    try {
      const response = await fetch("https://uzai3qn10d.execute-api.ap-south-1.amazonaws.com/prod/terraform", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          resourceId: resource.resourceId,
          resourceType: resource.resourceType,
          region: resource.region || 'us-east-1'
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.terraform) {
        await navigator.clipboard.writeText(data.terraform);
        handleSuccess("Terraform generated via API and copied!");
      } else {
        throw new Error("No Terraform configuration returned from API");
      }
    } catch (error) {
      console.error("Error generating terraform:", error);
      setIsGenerating(false);
      setLastAction(null);
      alert(`Failed to generate Terraform: ${error.message}`);
    }
  };

  const colors = getResourceColor(resource.resourceType);
  const priority = getPriorityLevel(resource.cost_impact || 0);

  return (
    <div className="group relative">
      {/* Enhanced glow effect */}
      <div className={`absolute -inset-1 bg-gradient-to-br ${colors.gradient} rounded-2xl opacity-0 group-hover:opacity-20 transition-all duration-500 blur-lg ${colors.glow}`}></div>
      
      {/* Main card with glass morphism effect */}
      <div className="relative bg-white/95 backdrop-blur-xl border border-gray-200/50 rounded-2xl overflow-hidden hover:border-gray-300/70 transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
        
        {/* Subtle background pattern */}
        <div className="absolute inset-0 opacity-5">
          <div className="absolute inset-0" style={{
            backgroundImage: `radial-gradient(circle at 20% 80%, ${colors.gradient.includes('orange') ? '#f97316' : colors.gradient.includes('purple') ? '#a855f7' : colors.gradient.includes('green') ? '#10b981' : colors.gradient.includes('blue') ? '#3b82f6' : colors.gradient.includes('yellow') ? '#f59e0b' : '#6b7280'} 0%, transparent 50%),
                             radial-gradient(circle at 80% 20%, ${colors.gradient.includes('orange') ? '#dc2626' : colors.gradient.includes('purple') ? '#ec4899' : colors.gradient.includes('green') ? '#14b8a6' : colors.gradient.includes('blue') ? '#4338ca' : colors.gradient.includes('yellow') ? '#ea580c' : '#374151'} 0%, transparent 50%)`,
          }}></div>
        </div>
        
        {/* Header section */}
        <div className="relative p-6 pb-4">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-4 min-w-0 flex-1">
              {/* Enhanced icon with multiple layers */}
              <div className="relative">
                <div className={`p-3 rounded-xl ${colors.iconBg} shadow-lg ring-1 ring-white/20 backdrop-blur-sm`}>
                  <div className={`${colors.text}`}>
                    {getResourceIcon(resource.resourceType)}
                  </div>
                </div>
                {/* Floating sparkle */}
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-gradient-to-br from-white to-gray-100 rounded-full shadow-sm opacity-80">
                  <Sparkles className="w-2 h-2 text-gray-400 m-0.5" />
                </div>
              </div>
              
              <div className="min-w-0 flex-1">
                <h3 className="text-lg font-bold text-gray-900 truncate mb-2" title={resource.resourceName}>
                  {resource.resourceName}
                </h3>
                <div className="flex items-center gap-2 flex-wrap">
                  <Badge className={`text-xs font-semibold px-3 py-1 rounded-full ${colors.badge}`}>
                    {resource.resourceType.toUpperCase()}
                  </Badge>
                  <Badge className={`text-xs font-semibold px-3 py-1 rounded-full flex items-center gap-1 ${priority.color}`}>
                    {priority.icon}
                    {priority.level}
                  </Badge>
                </div>
              </div>
            </div>
            
            {/* Enhanced cost impact display */}
            {resource.cost_impact > 0 && (
              <div className="text-right ml-4">
                <div className="flex items-center justify-end gap-1 mb-1">
                  <div className="p-1 bg-red-100 rounded-full">
                    <DollarSign className="w-3 h-3 text-red-600" />
                  </div>
                  <span className="text-xl font-bold text-red-600">
                    ${resource.cost_impact}
                  </span>
                </div>
                <div className="text-xs text-gray-500 bg-gray-50 px-2 py-1 rounded-full">
                  monthly waste
                </div>
              </div>
            )}
          </div>

          {/* Resource ID with copy functionality */}
          <div className="flex items-center gap-2 mb-4">
            <span className="text-xs font-medium text-gray-500 uppercase tracking-wider">Resource ID:</span>
            <div className="flex items-center gap-2 flex-1 min-w-0">
              <code className="text-xs font-mono bg-gray-100 px-3 py-1.5 rounded-full text-gray-700 truncate flex-1 border" title={resource.resourceId}>
                {resource.resourceId}
              </code>
              <button 
                onClick={() => navigator.clipboard.writeText(resource.resourceId)}
                className="p-1.5 hover:bg-gray-100 rounded-full transition-colors"
                title="Copy Resource ID"
              >
                <Copy className="w-3 h-3 text-gray-400" />
              </button>
            </div>
          </div>
        </div>

        {/* Enhanced waste reason section */}
        <div className="px-6 pb-4">
          <div className="relative overflow-hidden rounded-xl bg-gradient-to-br from-amber-50 via-orange-50 to-red-50 border border-amber-200/60 p-4 shadow-sm">
            {/* Background decoration */}
            <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-amber-200/30 to-orange-200/30 rounded-full -mr-10 -mt-10"></div>
            
            <div className="relative flex items-start gap-3">
              <div className="p-2 bg-amber-100 rounded-lg shadow-sm">
                <AlertTriangle className="w-4 h-4 text-amber-600" />
              </div>
              <div className="min-w-0 flex-1">
                <div className="flex items-center gap-2 mb-2">
                  <span className="text-xs font-bold text-amber-700 uppercase tracking-wider">
                    Optimization Opportunity
                  </span>
                  <div className="h-1 w-1 bg-amber-400 rounded-full"></div>
                  <span className="text-xs text-amber-600 font-medium">AI Detected</span>
                </div>
                <p className="text-sm text-gray-700 leading-relaxed font-medium">{resource.reason}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced metadata section */}
        <div className="px-6 pb-5">
          <div className="grid grid-cols-2 gap-3 mb-5">
            {resource.region && (
              <div className="flex items-center gap-3 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-3 border border-gray-200/50">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <MapPin className="w-3 h-3 text-blue-600" />
                </div>
                <div className="min-w-0 flex-1">
                  <span className="text-xs text-gray-500 font-medium block">Region</span>
                  <span className="text-sm text-gray-900 font-semibold truncate block">{resource.region}</span>
                </div>
              </div>
            )}
            
            {resource.last_used ? (
              <div className="flex items-center gap-3 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-3 border border-gray-200/50">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <Clock className="w-3 h-3 text-purple-600" />
                </div>
                <div className="min-w-0 flex-1">
                  <span className="text-xs text-gray-500 font-medium block">Last Used</span>
                  <span className="text-sm text-gray-900 font-semibold truncate block">{resource.last_used}</span>
                </div>
              </div>
            ) : (
              <div className="flex items-center gap-3 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-3 border border-gray-200/50">
                <div className="p-2 bg-green-100 rounded-lg">
                  <TrendingUp className="w-3 h-3 text-green-600" />
                </div>
                <div className="min-w-0 flex-1">
                  <span className="text-xs text-gray-500 font-medium block">Status</span>
                  <span className="text-sm text-gray-900 font-semibold">Ready to optimize</span>
                </div>
              </div>
            )}
          </div>

          {/* Enhanced action buttons */}
          <div className="grid grid-cols-2 gap-3">
            <Button
              onClick={handleGenerate}
              disabled={isGenerating}
              variant="outline"
              size="sm"
              className="relative overflow-hidden group/btn border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 text-purple-700 font-semibold rounded-xl h-11 transition-all duration-200"
            >
              <div className="flex items-center justify-center gap-2 relative z-10">
                {isGenerating && lastAction === 'local' ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span className="text-xs">Generating...</span>
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4" />
                    <span className="text-xs font-semibold">Local Gen</span>
                  </>
                )}
              </div>
              {/* Hover effect */}
              <div className="absolute inset-0 bg-gradient-to-r from-purple-100/50 to-purple-200/50 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-200"></div>
            </Button>

            <Button
              onClick={handleGenerateFromAPI}
              disabled={isGenerating}
              size="sm"
              className="relative overflow-hidden bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-700 hover:from-blue-500 hover:via-blue-600 hover:to-indigo-600 text-white border-0 font-semibold rounded-xl h-11 shadow-lg hover:shadow-xl transition-all duration-200"
            >
              <div className="flex items-center justify-center gap-2 relative z-10">
                {isGenerating && lastAction === 'api' ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span className="text-xs">Generating...</span>
                  </>
                ) : (
                  <>
                    <ExternalLink className="w-4 h-4" />
                    <span className="text-xs font-semibold">API Gen</span>
                  </>
                )}
              </div>
              {/* Shimmer effect */}
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
            </Button>
          </div>
        </div>

        {/* Enhanced success overlay with animation */}
        {showSuccess && (
          <div className="absolute inset-0 bg-gradient-to-br from-emerald-500/96 via-green-500/96 to-teal-500/96 backdrop-blur-sm rounded-2xl flex items-center justify-center z-20 animate-in fade-in duration-300">
            {/* Background pattern */}
            <div className="absolute inset-0 opacity-10">
              <div className="absolute inset-0" style={{
                backgroundImage: 'radial-gradient(circle at 30% 70%, #10b981 0%, transparent 50%), radial-gradient(circle at 70% 30%, #14b8a6 0%, transparent 50%)',
              }}></div>
            </div>
            
            <div className="text-center px-6 relative">
              <div className="relative mb-4">
                <CheckCircle className="w-16 h-16 text-white mx-auto animate-bounce" />
                <div className="absolute inset-0 w-16 h-16 mx-auto animate-ping">
                  <CheckCircle className="w-16 h-16 text-white/50" />
                </div>
              </div>
              <div className="text-white font-bold text-xl mb-2">Success!</div>
              <div className="text-green-100 text-sm leading-relaxed max-w-xs">{showSuccess}</div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default RecommendationCard;